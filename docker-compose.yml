version: "3.7"


services:
  server:
    build:
      context: ./
      target: production-build-stage
      dockerfile: Dockerfile
    container_name: server
    ports:
      - "3000:3000"
      - "4000:4000"
      - "6501:6379"
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: "always"
    networks:
      - backend
    links:
      - mongo
      - redis
    depends_on:
      - mongo
      - redis
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: CHANGE_ME_I_M_NOT_SECURE
    ports:
      - "27017:27017"
    volumes:
      - ${PWD}./mongo-data:/data/db
    networks:
      - backend

    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
    restart: unless-stopped
  redis:
    image: redis
    container_name: redis
    ports:
      - "6500:6379"
    hostname: redis
    networks:
      - backend
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/galileo-backend.johnson.rw/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/galileo-backend.johnson.rw/privkey.pem:/etc/ssl/certs/privkey.pem:ro
    depends_on:
      - server
    networks:
      - backend
    restart: "unless-stopped"

networks:
  backend:
    driver: bridge
  redis:
    driver: bridge

volumes:
  data:
    driver: local
  mongo-data:
    driver: local
  mongo-init:
    driver: local

