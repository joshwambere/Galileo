

paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Add User
      parameters:
        - name: body
          in: body
          description: user information
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  /auth/verify:
    post:
      tags:
        - Auth
      summary: verify User
      parameters:
        - name: body
          in: body
          description: otp information
          required: true
          schema:
            $ref: '#/definitions/otp'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /auth/login:
    post:
      tags:
        - Auth
      summary: login User
      parameters:
        - name: body
          in: body
          description: login information
          required: true
          schema:
            $ref: '#/definitions/login'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        401:
          description: 'unauthorized'
        500:
          description: 'Server Error'

  /auth/deleteAccount/{id}:
    get:
      tags:
        - Auth
      summary: delete User
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users
  /auth/users:
    get:
      tags:
        - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags:
        - users
      summary: Add User
      parameters:
        - name: body
          in: body
          description: user information
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags:
        - users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags:
        - users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'



/project/create:
  # [POST] project/create
  post:
    tags:
      - project
    summary: create a project
    parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/projects'
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/project/pm/add:
  # [POST] project/pm/add
  post:
    tags:
      - project
    summary: add project manager to a project
    parameters:
      - name: body
        in: body
        description: Pm Data
        required: true
        schema:
          $ref: '#/definitions/pm'
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/project:
  # [GET] project
  get:
    tags:
      - project
    summary: Get all projects

    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/project/invite:
  # [POST] project/invite
  post:
    tags:
      - project
    summary: invite contributor to a project
    parameters:
      - name: body
        in: body
        description: Pm Data
        required: true
        schema:
          $ref: '#/definitions/pm'
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/chatRoom:
  # [POST] chatRoom
  post:
    tags:
      - chatroom
    summary: create a chatroom
    parameters:
      - name: body
        in: body
        description: Pm Data
        required: true
        schema:
          $ref: '#/definitions/chatRoom'
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

  get:
    tags:
      - chatroom
    summary: get all chatroom
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/chatRoom/{id}:
  delete:
    tags:
      - chatroom
    summary: delete chatroom
    parameters:
      - name: id
        in: path
        description: User Id
        required: true
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'

/chatRoom/getChatRoom:
  # [POST] chatRoom
  post:
    tags:
      - chatroom
    summary: create a chatroom
    parameters:
      - name: body
        in: body
        description: Pm Data
        required: true
        schema:
          $ref: '#/definitions/chatRoomId'
    responses:
      200:
        description: 'OK'
      409:
        description: 'Conflict'
      500:
        description: 'Server Error'


# definitions
definitions:

  chatRoom:
    type: object
    required:
      - projectId
    properties:
      projectId:
        type: string
        description: project Id
        required: true

  chatRoomId:
    type: object
    required:
      - chatRoomId
    properties:
      chatRoomId:
        type: string
        description: chatRoom Id
        required: true
  projects:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        description: project name
        required: true
      description:
        type: string
        description: project description
  pm:
    type: object
    required:
      - email
      - projectId
    properties:
      email:
        type: string
        description: pm email
      projectId:
        type: string
        description: project Id
  otp:
    type: object
    required:
      - otp
    properties:
      otp:
        type: string
        description: otp code
  login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: email
        required: true
      password:
        type: string
        description: password
        required: true
  users:
    type: object
    required:
      - name
      - email
      - userName
      - employeeId
      - password
      - profileImage
    properties:
      name:
        type: string
        description: Name
      email:
        type: string
        description: user Email
      userName:
        type: string
        description: User Name
      employeeId:
        type: string
        description: Employee Id
      profileImage:
        type: string
        description: Profile Image
      password:
        type: string
        description: user Password

schemes:
  - https
  - http
