name: api-deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Copy environment variable
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.DO_SSH_PORT }} ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} << 'EOF'
            cd Galileo
            echo PORT=${{ secrets.PORT }} > .env.${{ secrets.NODE_ENV }}
            echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env.${{ secrets.NODE_ENV }}
            echo APP_ENV=${{ secrets.APP_ENV }} >> .env
            echo API_VERSION=${{ secrets.API_VERSION }} >> .env.${{ secrets.NODE_ENV }}
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env.${{ secrets.NODE_ENV }}
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env.${{ secrets.NODE_ENV }}
            echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env.${{ secrets.NODE_ENV }}
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env.${{ secrets.NODE_ENV }}
            echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env.${{ secrets.NODE_ENV }}
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env.${{ secrets.NODE_ENV }}
            echo TOKEN_EXPIRES_IN=${{ secrets.TOKEN_EXPIRES_IN }} >> .env.${{ secrets.NODE_ENV }}
            echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env.${{ secrets.NODE_ENV }}
            echo CREDENTIALS=${{ secrets.CREDENTIALS }} >> .env.${{ secrets.NODE_ENV }}
            echo HOST=${{ secrets.HOST }} >> .env
            echo SOCKET_PORT=${{ secrets.SOCKET_PORT }} >> .env.${{ secrets.NODE_ENV }}
          EOF

      - name: Deploy and Run Migrations
        # run the docker container

        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.DO_SSH_PORT }} ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} << 'EOF'
              cd Galileo
              git pull origin main
              apt-get update
              apt-get install -y docker.io docker-compose yarn
              yarn install
              sudo lsof -t -i:433 | xargs kill -9
              sudo lsof -t -i:80 | xargs kill -9
              docker-compose down --remove-orphans
              docker image prune -a -f
              docker-compose up --build -d
          EOF
